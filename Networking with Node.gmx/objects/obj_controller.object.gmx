<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

//Set Variable
to_who = "none";
global.list = ds_list_create();

//Set reference
application_surface_enable(false);
device_mouse_dbclick_enable(false);

//Whether a connection (or an attempt) is active
active = false;

//Cached login info
login_uuid = "";
login_name = "";
login_id = "";

//Set ping
ping = -1;

alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Connect to the server

event_user(15); //Connect attempt
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ping
var status = gmsio_status();
if (status == gmsio_status_connected){

//Construct message
var json_data = ds_map_create();
ds_map_add(json_data, "id", outsig_ping);
ds_map_add(json_data, "msg", string(current_time));
var body = json_encode(json_data);
ds_map_destroy(json_data);

//Send message
gmsio_send_message(body);
}

alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Monitor running status

if (active) {
    var status = gmsio_status();
    
    //Connection successful in login room, show login
    if (room == rm_connecting) &amp;&amp; (status == gmsio_status_connected) &amp;&amp; (!instance_exists(obj_login)) {
        //instance_create(x, y, obj_login);
        room_goto(rm_login);
    }

    //Connection broke
    if (status == gmsio_status_disconnected) {
        //Connection broke while chatting, go back to login screen and ask for reconnect
        if (room != rm_connecting) {
            room_goto(rm_login);
        }
        //Connection broke while loggin in, destroy login prompt
        else {
            /*with (obj_login) {
                instance_destroy();
            }*/
        }
        active = false;
        visible = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Receiving data

if (gmsio_status() == gmsio_status_connected) {
    while (gmsio_has_message()) {
        //Decode response
        var json_data = json_decode(gmsio_get_message());
        var message_id = ds_map_find_value(json_data, 'id');
        var message_body = ds_map_find_value(json_data, 'msg');
        ds_map_destroy(json_data);
        
        //Route between different functions
        switch (message_id) {
        
            //Login refused
            case insig_login_refused:
                show_message_async(message_body);
            break;
            
            //Login accepted
            case insig_login_accepted:
                json_data = json_decode(message_body);
                login_name = ds_map_find_value(json_data, 'name');
                login_uuid = ds_map_find_value(json_data, 'uuid');
                login_id = ds_map_find_value(json_data, 'id');
                ds_map_destroy(json_data);
                show_debug_message("Login OK. Your UUID is: " + login_uuid);
                room_goto(rm_main);
            break;
            
            //Received shout from another user
            case insig_shout_relay:
                json_data = json_decode(message_body);
                var from = ds_map_find_value(json_data, 'from');
                var shout_message = ds_map_find_value(json_data, 'msg');
                var to_who = ds_map_find_value(json_data, 'name');
                ds_map_destroy(json_data);
                
                if(to_who == "none")
                {
                    shoutbox_add_line("[" + from + "] " + shout_message, c_white);
                    
                    with(obj_client)
                    {
                        if(name == from)
                        {
                            te_bubble_create_ext(shout_message, x, y, 200, id);
                        }
                    }
                }else if(to_who == "all")
                {
                    shoutbox_add_line("&gt;&gt; (외치기)[" + from + "]" + shout_message, c_lime);
                }else{
                    if(to_who == login_name)
                    {
                        shoutbox_add_line("&gt;&gt; [" + from + " 에게서]" + shout_message, c_lime);
                    }
                }
                
            break;
            
            //Another user has left
            case insig_user_leave:
                json_data = json_decode(message_body);
                var user_name = ds_map_find_value(json_data, 'name');
                var user_uuid = ds_map_find_value(json_data, 'uuid');
                ds_map_destroy(json_data);
                shoutbox_add_line(user_name + " 님이 접속을 종료하셨습니다", c_red);
                show_debug_message(user_name + " (" + user_uuid + ") has disconnected.");
                
                with(obj_client)
                {
                    if(control == user_uuid)
                        instance_destroy();
                }
            break;
            
            //Another user has joined
            case insig_user_join:
                json_data = json_decode(message_body);
                var user_name = ds_map_find_value(json_data, 'name');
                var user_uuid = ds_map_find_value(json_data, 'uuid');
                ds_map_destroy(json_data);
                shoutbox_add_line(user_name + " 님이 접속하셨습니다", c_green);
            break;
            
            //Ping
            case insig_ping:
                ping = current_time - real(message_body);
            break;
            
            //Position
            case insig_user_position:
                if(login_uuid != "")
                {
                    json_data = json_decode(message_body);
                    var user_x = real(ds_map_find_value(json_data, 'x'));
                    var user_y = real(ds_map_find_value(json_data, 'y'));
                    var user_uuid = ds_map_find_value(json_data, 'uuid');
                    var user_name = ds_map_find_value(json_data, 'name');
                    ds_map_destroy(json_data);
                    
                    var check = true;
                    with(obj_client){
                        if(user_uuid == control){
                            check = false;
                            x = user_x;
                            y = user_y;
                            alarm[1] = room_speed * 2;
                        }
                    }
                    
                    if(check){
                        var ins = instance_create(user_x, user_y, obj_client);
                        ins.control = user_uuid;
                        ins.name = user_name;
                    }
                }
            break;
            
            //Space Move
            case insig_user_space:
                json_data = json_decode(message_body);
                var user_uuid = ds_map_find_value(json_data, 'uuid');
                var user_space = real(ds_map_find_value(json_data, 'space'));
                ds_map_destroy(json_data);
                
                if(login_uuid == user_uuid)
                {
                    with(obj_client)
                    {
                        if(control != user_uuid)
                            instance_destroy();
                        else
                        {
                             x = 900;
                             y = 555;
                        }
                    }
                    
                    obj_space.space = user_space;
                    shoutbox_add_line("현재 당신의 Space는 " + string(obj_space.space) + " 입니다", c_fuchsia);
                }else{
                    with(obj_client)
                    {
                        if(control == user_uuid)
                            instance_destroy();
                    }
                }
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Connect to the correct server

//Native TCP server
if (os_browser == browser_not_a_browser) {
    gmsio_connect(server_ip, tcp_port);
}
//Socket.IO server
else {
    gmsio_connect(server_ip, socketio_port);
}

//Mark connection as active (or at least, actively in progress)
active = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Send login request message to chat server

login_name = login_as;

//Construct message
var json_data = ds_map_create();
ds_map_add(json_data, "id", outsig_login);
ds_map_add(json_data, "msg", login_as);
var body = json_encode(json_data);
ds_map_destroy(json_data);

//Send message
gmsio_send_message(body);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Send shout message to chat server

//Construct message
var json_data = ds_map_create();
ds_map_add(json_data, "id", outsig_shout);
ds_map_add(json_data, "msg", to_send);
ds_map_add(json_data, "name", to_who);
var body = json_encode(json_data);
ds_map_destroy(json_data);

//Send message
gmsio_send_message(body);

//Reset who
if(to_who != "none")
    to_who = "none";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw ping
draw_set_font(font_text)
draw_set_halign(fa_left)
draw_set_valign(fa_top)
draw_set_alpha(0.5)
draw_text(5, 5, "ping" + string(ping))
draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Paint
var status = gmsio_status();
if (status != gmsio_status_connected) {
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_font(fnt_text);
    draw_set_color(c_black);
    if (status == gmsio_status_disconnected) {
        draw_text(room_width/2, room_height/2, "Failed to connect. Press R to retry.");
    }
    else if (status == gmsio_status_connecting) {
        draw_text(room_width/2, room_height/2, "Connecting...");
    }
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Retry on a failed connection
if (!active) {
    event_user(15); //Connect attempt
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
