{
  "name": "curry2",
  "description": "Curry a binary function.",
  "version": "0.1.0",
  "author": {
    "name": "Wil Moore III",
    "email": "wil.moore@wilmoore.com"
  },
  "bugs": {
    "url": "https://github.com/wilmoore/curry2.js/issues"
  },
  "dependencies": {},
  "devDependencies": {
    "istanbul": "^0.3.13",
    "nodemon": "^1.3.7",
    "standard": "^3.7.1",
    "tap-spec": "^2.2.2",
    "tape": "^4.0.0",
    "tape-catch": "^1.0.4"
  },
  "homepage": "https://github.com/wilmoore/curry2.js",
  "keywords": [],
  "license": "MIT",
  "main": "index.js",
  "preferGlobal": false,
  "private": false,
  "repository": {
    "type": "git",
    "url": "https://github.com/wilmoore/curry2.js"
  },
  "scripts": {
    "cover": "istanbul cover test.js",
    "dev": "nodemon -x 'npm run test --silent' -e 'js json'",
    "release-major": "npm version major && git push --follow-tags && npm publish",
    "release-minor": "npm version minor && git push --follow-tags && npm publish",
    "release-patch": "npm version patch && git push --follow-tags && npm publish",
    "standard": "standard",
    "test": "npm run standard --silent && node test.js | tap-spec"
  },
  "readme": "# curry2\n> Curry a binary function.\n\n[![Build Status](http://img.shields.io/travis/wilmoore/curry2.js.svg)](https://travis-ci.org/wilmoore/curry2.js) [![Code Climate](https://codeclimate.com/github/wilmoore/curry2.js/badges/gpa.svg)](https://codeclimate.com/github/wilmoore/curry2.js) [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\n\n```shell\nnpm install curry2 --save\n```\n\n>  You can also use Duo, Bower or [download the files manually](https://github.com/wilmoore/curry2.js/releases).\n\n###### npm stats\n\n[![npm](https://img.shields.io/npm/v/curry2.svg)](https://www.npmjs.org/package/curry2) [![NPM downloads](http://img.shields.io/npm/dm/curry2.svg)](https://www.npmjs.org/package/curry2) [![Dependency Status](https://gemnasium.com/wilmoore/curry2.js.svg)](https://gemnasium.com/wilmoore/curry2.js)\n\n## API Example\n\n###### require\n\n```js\nvar curry2 = require('curry2')\n```\n\n###### function to curry\n\n```js\nvar add = curry2(function (a, b) {\n  return a + b\n})\n```\n\n###### full application\n\n```js\nadd(5, 2)\n//=> 7\n```\n\n###### partial application\n\n```js\nvar add10 = add(10)\nadd(5)\n//=> 15\n```\n\n###### iteratee\n\n```js\n[100, 200, 300].map(add10)\n//=> [ 110, 210, 310 ]\n```\n\n###### uncurry\n\n```js\nvar orig = add.uncurry()\n\ntypeof orig\n//=> 'function'\n\norig.length\n//=> 2\n```\n\n## Features\n\n - Binary functions...that's it.\n - Will always be less than 20 LOC (not including comments).\n - No dependencies.\n\n## Anti-Features\n\n - Will not attempt to curry n-ary functions.\n - Will never `eval` your functions.\n\n## Limitations\n\n - You will lose `fn.name`.\n\n## API\n\n### `curry2(fn)`\n\n###### arguments\n\n - `fn: (Function)` Binary function to curry.\n - `[self]: (Object)` Function `this` context.\n\n###### returns\n\n - `(Function|*)` If partially applied, return unary function, otherwise, return result of full application..\n\n### `.uncurry()`\n\n###### returns\n\n - `(Function)` returns original function.\n\n## Reference\n\n - [Currying](https://en.wikipedia.org/wiki/Currying)\n\n## Alternatives\n\n - [curry](https://www.npmjs.com/package/curry)\n - [dyn-curry](https://www.npmjs.com/package/dyn-curry)\n - [currymember](https://www.npmjs.com/package/currymember)\n - [curryable](https://www.npmjs.com/package/curryable)\n - [fk](https://www.npmjs.com/package/fk)\n\n## Contributing\n\n> SEE: [contributing.md](contributing.md)\n\n## Licenses\n\n[![GitHub license](https://img.shields.io/github/license/wilmoore/curry2.js.svg)](https://github.com/wilmoore/curry2.js/blob/master/license)\n",
  "readmeFilename": "readme.md",
  "_id": "curry2@0.1.0",
  "_shasum": "cc9837ec9148a6eaea47f6cedf254d103031a233",
  "_from": "curry2@^0.1.0",
  "_resolved": "https://registry.npmjs.org/curry2/-/curry2-0.1.0.tgz"
}
